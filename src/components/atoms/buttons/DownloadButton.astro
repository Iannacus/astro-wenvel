---
  const {ref, icon, caption, variant, single} = Astro.props;

  const singleClasses = [{
    'single': single
  }]

  const colorDictionary = {
    primary: {
      'background-color': 'var(--orange-drop-shadow-1)',
      'background-gradient-start': 'var(--orange-drop-shadow-1)',
      'background-gradient-end': 'var(--gradient-purple-1)',
      'drop-shadow': 'var(--gradient-purple-1-rgba-2)',
      'background-after': 'var(--orange-drop-shadow)'
    },
    secondary: {
      'background-color': 'var(--gradient-red)',
      'background-gradient-start': 'var(--orange-drop-shadow)',
      'background-gradient-end': 'var(--gradient-purple-1)',
      'drop-shadow': 'var(--orange-drop-shadow-rgba-2)',
      'background-after': 'var(--orange-drop-shadow)',
    },
  }
---

<a href={ref ?? '#'} class="button button-background">
  <div class:list={["button-inner", singleClasses]}>
    {icon && (
      <div class="button-icon">
        <i class:list={['icon', icon]} />
      </div>
    )}
    <div class="button-content">
      {caption && <h5 >{caption}</h5>}
      <h3 >
        <slot />
      </h3>
    </div>  
  </div>
</a>

<style define:vars={{ ...colorDictionary[variant]}}>
  .button {
    position: relative;
    display: inline-block;
    width: max-content;
    text-align: left;
    border-radius: 4rem;
    border-top-left-radius: 0;
    overflow: hidden;
  }

  .button-inner {
    display: flex;
    align-items: center;
    padding: 1.8rem 3rem 1.6rem 3.4rem;
  }

  .button-inner::after {
    content: '';
    display: block;
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 1;
    background: #fff;
    -webkit-transition: all 0.4s ease-in-out 0s;
    transition: all 0.4s ease-in-out 0s;
  }

  .single {
    padding: 1.9rem 5.6rem;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .button-icon {
    position: relative;
    z-index: 2;
    i{
      -webkit-transition: all 0.4s ease-in-out 0s;
      transition: all 0.4s ease-in-out 0s;
    }
  }

  .button-content {
    position: relative;
    z-index: 2;
    margin-left: 1.2rem;
  }

  .button-content h5 {
    font-size: 1rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: .1rem;
    margin: 0;
    -webkit-transition: all 0.4s ease-in-out 0s;
      transition: all 0.4s ease-in-out 0s;
  }

  .button-content h3 {
    font-size: 2rem;
    letter-spacing: .2rem;
    font-weight: 700;
    margin: .3rem 0 0 0;
    -webkit-transition: all 0.4s ease-in-out 0s;
    transition: all 0.4s ease-in-out 0s;
  }

  .single h3 {
    font-size: 1.5rem;
  }

  .button-background {
    color: #fff;
    background: var(--background-color);
    background: linear-gradient(
      270deg,
      var(--background-gradient-start) 0%,
      var(--background-gradient-end) 100%
    );
    filter: drop-shadow(0px 10px 10px var(--drop-shadow))
  }

  .button-background .button-inner::after {
    background: var(--background-color);
  }

  .button-background .icon {
    font-size: 3.4rem;
  }

  .button-background h3 {
    color: #fff;
  }

  .button-background h5 {
    color: #fff
  }

  .button:hover .button-inner::after {
    left: 100%;
  }

  .button:hover .button-content h3, .button:hover .button-content h5 {
    coclor: #fff
  }
</style>